import { notFound, redirect } from "next/navigation"
import { Chatbot, User } from "@prisma/client"

import { ChatbotForm } from "@/components/chatbot-form"
import { DashboardHeader } from "@/components/header"
import { DashboardShell } from "@/components/shell"
import { authOptions } from "@/lib/auth"
import { db } from "@/lib/db"
import { getCurrentUser } from "@/lib/session"
import Link from "next/link"
import { buttonVariants } from "@/components/ui/button"
import { cn } from "@/lib/utils"
import { Icons } from "@/components/icons"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { siteConfig } from "@/config/site"

interface ChatbotSettingsProps {
    params: { chatbotId: string }
}

async function getChatbotForUser(chatbotId: Chatbot["id"], userId: User["id"]) {
    return await db.chatbot.findFirst({
        select: {
            id: true,
            name: true,
            createdAt: true,
            openaiKey: true,
            welcomeMessage: true,
            prompt: true,
            model: {
                select: {
                    id: true,
                    name: true,
                }
            },
        },
        where: {
            id: chatbotId,
            userId: userId,
        },
    })
}


export default async function ChatbotPage({ params }: ChatbotSettingsProps) {

    const user = await getCurrentUser()

    if (!user) {
        redirect(authOptions?.pages?.signIn || "/login")
    }

    const chatbot = await getChatbotForUser(params.chatbotId, user.id)

    if (!chatbot) {
        notFound()
    }

    const files = await db.file.findMany({
        where: {
            userId: user.id,
        },
    })

    const currentFile = await db.chatbotFiles.findFirst({
        select: {
            id: true,
            chatbotId: true,
            file: {
                select: {
                    id: true,
                    name: true,
                }
            },
        },
        where: {
            chatbotId: chatbot.id,
        },
    })

    const models = await db.chatbotModel.findMany({})

    return (
        <DashboardShell>
            <DashboardHeader heading="Chatbot" text="Configure your chatbot here">
                <Link
                    href="/dashboard/chatbots"
                    className={cn(
                        buttonVariants({ variant: "ghost" }),
                        "md:left-8 md:top-8"
                    )}
                >
                    <>
                        <Icons.chevronLeft className="mr-2 h-4 w-4" />
                        Back
                    </>
                </Link>
            </DashboardHeader>
            <div className="grid gap-10">
                <ChatbotForm
                    user={user}
                    files={files}
                    currentFileId={currentFile?.file.id || ""}
                    models={models}
                    chatbot={{
                        id: chatbot.id,
                        name: chatbot.name,
                        createdAt: chatbot.createdAt,
                        openaiKey: chatbot.openaiKey,
                        modelId: chatbot.model.id,
                        welcomeMessage: chatbot.welcomeMessage,
                        prompt: chatbot.prompt,
                    }} />
            </div>
            <Card>
                <CardHeader>
                    <CardTitle>Chatbot id</CardTitle>
                    <CardDescription>
                        This is the unique chatbot id generated by {siteConfig.name}.
                    </CardDescription>
                </CardHeader>
                <CardContent>
                    <div className="flex space-x-2">
                        <Input value={chatbot.id} readOnly />
                    </div>
                </CardContent>
            </Card>

        </DashboardShell>
    )
}